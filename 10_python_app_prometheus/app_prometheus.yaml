apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: python-demo-app-prometheus
  name: python-demo-app-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-demo-app-prometheus
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: python-demo-app-prometheus
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prom_conf.yml
        - --web.enable-lifecycle
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention=2200h
        image: prom/prometheus:v2.41.0
        imagePullPolicy: Always
        name: prometheus
        ports:
        - containerPort: 9090
          name: prometheus
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/prometheus/
          name: conf
        - mountPath: /prometheus
          name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: prometheusconf
        name: conf
      - name: data
#        emptyDir: {}
        persistentVolumeClaim:
          claimName: python-demo-app-prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: python-demo-app-prometheus
spec:
  ports:
  - name: prometheus
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: python-demo-app-prometheus
  sessionAffinity: None
  type: ClusterIP
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: python-demo-app-prometheus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheusconf
data:
  prom_conf.yml: |
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'python-demo-app'

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
        - targets: ['python-demo-app-metrics:8080']
